use std::fs;

// These constants represent the RISC-V ELF and the image ID generated by risc0-build.
// The ELF is used for proving and the ID is used for verification.
use bridge_core::btc::{calculate_double_sha256, BlockHeader};
use bridge_methods::{GUEST_ELF, GUEST_ID};
use risc0_zkvm::{default_prover, ExecutorEnv};
use serde_json::Value;

fn main() {
    env_logger::init();

    let data = fs::read_to_string("./host/data/block.json").unwrap();
    let json_data: Value = serde_json::from_str(&data).unwrap();

    let rpc_data = fs::read_to_string("./host/data/rpc.json").unwrap();
    let rpc_json_data: Value = serde_json::from_str(&rpc_data).unwrap();

    println!("{:?}", json_data);
    println!("{:?}", rpc_json_data);

    let input: [u8; 80] = hex::decode(json_data["extras"]["header"].as_str().unwrap())
        .unwrap()
        .try_into()
        .unwrap();

    let block_header = BlockHeader::from_slice(&input);

    println!("Input: {}", hex::encode(input));

    println!(
        "Double SHA256: {}",
        hex::encode(calculate_double_sha256(&input))
    );

    let chain_work = "00000000000000000000000000000000000000006102d3474618c46bb97ab9dd";
    // let chain_work = rpc_json_data[0]["chainwork"].as_str().unwrap();
    // let chain_work = "00000000000000000000000000000000000000006103107e63fbf65e4f349720";
    let chain_work: [u8; 32] = hex::decode(chain_work).unwrap().try_into().unwrap();

    let _tx = "fe3e94c01aa12707750289f26306b3ab00091c2a2052fbf7280d11dcb2c929c1";

    let env = ExecutorEnv::builder()
        .write(&block_header)
        .unwrap()
        .write(&chain_work)
        .unwrap()
        .build()
        .unwrap();

    // Obtain the default prover.
    let prover = default_prover();

    // Produce a receipt by proving the specified ELF binary.
    let receipt = prover.prove_elf(env, GUEST_ELF).unwrap();

    let (output_block_hash, chain_work): ([u8; 32], [u8; 32]) = receipt.journal.decode().unwrap();

    println!("Output: {}", hex::encode(output_block_hash));
    println!("Chain Work: {}", hex::encode(chain_work));

    // assert_eq!(
    //     hex::encode(chain_work),
    //     rpc_json_data[1]["chainwork"].as_str().unwrap()
    // );

    // Optional: Verify receipt to confirm that recipients will also be able to
    // verify your receipt
    receipt.verify(GUEST_ID).unwrap();
}
